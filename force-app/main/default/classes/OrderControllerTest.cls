@isTest
public class OrderControllerTest {
  @isTest
  static void testGetSumOrdersOfAccount_WithActivatedOrders() {
    // Pr√©paration des donn√©es
    TestDataFactory.TestEntities data = TestDataFactory.createBaseDataWithDraftOrders(
      2
    );

    // Ajout d'OrderItems aux commandes cr√©√©es
    List<OrderItem> items = new List<OrderItem>();
    for (Order ord : data.orders) {
      items.add(
        new OrderItem(
          OrderId = ord.Id,
          PricebookEntryId = data.pricebookEntryId,
          Quantity = 2,
          UnitPrice = 100
        )
      );
    }
    insert items;

    // Activation de la premi√®re commande
    Order toActivate = data.orders[0];
    toActivate.Status = 'Activated';
    update toActivate;

    Test.startTest();
    Decimal total = OrderController.getSumOrdersOfAccount(data.accountId);
    Test.stopTest();

    System.debug('üìä Total retourn√© : ' + total);
    System.assertEquals(
      200,
      total,
      'Le total devrait √™tre √©gal √† 200 pour une commande activ√©e de 2 x 100.'
    );
  }

  @isTest
  static void testGetSumOrdersOfAccount_InvalidId() {
    Boolean exceptionThrown = false;

    Test.startTest();
    try {
      OrderController.getSumOrdersOfAccount(null);
    } catch (Exception e) {
      exceptionThrown = true;
      System.debug('‚úÖ Exception captur√©e : ' + e.getMessage());
    }
    Test.stopTest();

    System.assert(
      exceptionThrown,
      'Une exception aurait d√ª √™tre lev√©e avec un ID null.'
    );
  }

  @isTest
  static void testGetSumOrdersOfAccount_EmptyResult() {
    // Cr√©ation d'un compte sans commande activ√©e
    Account acc = new Account(Name = 'Account without orders');
    insert acc;

    Test.startTest();
    Decimal total = OrderController.getSumOrdersOfAccount(acc.Id);
    Test.stopTest();

    System.assertEquals(
      0,
      total,
      'Le total doit √™tre 0 si aucune commande activ√©e n‚Äôest li√©e au compte.'
    );
  }
}
